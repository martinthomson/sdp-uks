begin

builtins: hashing, symmetric-encryption, asymmetric-encryption, signing
functions: h/1, pk/1


/* This is a simple model capturing the essential features of DTLS-SRTP.
 *
 * The central server supplies a CallId to Offerer and Answerer,
 * each of whom have a long-term key pair.
 *
 * O -> A: Offer  [CallId, ORandom, K_pub_O]  // over secure signaling channel 
 * A -> O: Answer [CallId, ARandom, K_pub_A]  // over secure signaling channel
 * A -> O: clienthello [Sign(K_priv_A, (ORandom, K_pub_O, ARandom, K_pub_A))
 * O -> A: serverhello [Sign(K_priv_O, (ORandom, K_pub_O, ARandom, K_pub_A))
 *
 * The subtle point here is that in RFC 5763/5764, the randoms and the
 * CallId are *not* carried in the signaling, which allows for a UKS,
 * thus falsifying Lemma NoUKS.
 *
 * IMPORTANT: This model allows the answerer to do multiple calls and the
 * attacker can simply swap them two good calls in the RFC 5763 model, however,
 * the Attacker_SendAnswer rule also allows the more powerful UKS, which
 * Tamarin finds. TVDM: This model does not use this rule. 
 * 
 */

rule SetupEntity:
  [ Fr(~ltkA) ]--[ GenLtk($A, ~ltkA)
  ]->
  [ !Ltk($A, ~ltkA), !Pk($A, pk(~ltkA)) ]

rule InitiateCall:
   [ Fr(~callID) ] --[ Initiated(~callID) ]->
   [ OfferInitiated(~callID), AnswerInitiated(~callID) ]

rule O_SendOffer:
let
   O = $O
   orand = ~orand
   opub = pk(~ltkO)
   opriv = ~ltkO

in
   [ OfferInitiated(callID), Fr(orand), !Ltk(O,~ltkO),!Pk(O, pk(~ltkO)) ]
   --[  UsePK(O, opub),
	InitiatorOffer(callID, opub, orand) ]->
   [ St_init(O,1, callID, orand, opub, opriv),
     Offer(<callID, h(opub)>),
     Out(<orand, opub>)]

rule A_SendOfferAndHello: 
let
   A = $A
   arand = ~arand
   apub = pk(~ltkA)
   apriv = ~ltkA
   
in
   [ AnswerInitiated(callID), In(<orand_in, opub_in>), Offer(<callID, pubdigest>), Fr(arand), !Ltk(A, ~ltkA), !Pk(A, pk(~ltkA))]
   --[ InitiatorOfferReceived(callID, opub_in, orand_in),
       Eq(h(opub_in), pubdigest), 
       UsePK(A, apub), 
       ResponderOffer(callID, apub, arand),
       ResopnderHello(sign{<orand_in, opub_in, arand, apub>}apriv)]->
   [ St_init(A,1, callID, orand_in, opub_in, arand, apub, apriv), 
     ResponderOfferSent(callID, h(apub)),
     Out(<arand, apub, sign{<orand_in, opub_in, arand, apub>}apriv>)]

rule O_SendHelloAndCheck: 

   [ St_init(O,1, callID, orand, opub, opriv), ResponderOfferSent(callID, apubdigest) , In(<arand_in, apub_in, signature>)]
   --[ ResponderOfferReceived(callID, apub_in, arand_in), 
       Eq(h(apub_in), apubdigest),
       Eq(verify(signature, <orand, opub, arand_in, apub_in>, apub_in), true),
       ResponderHelloChecked(orand, opub, arand_in, apub_in),
       InitiatorHello(sign{<orand, opub, arand_in, apub_in>}opriv),
       InitiatorConnected(callID, orand, opub, arand_in, apub_in)]->
   [ St_init(O,2,callID, orand, opub, opriv, arand_in, apub_in),
     Out(<sign{<orand, opub, arand_in, apub_in>}opriv>)]

rule A_Check: 

   [ St_init(A,1, callID, orand_in, opub_in, arand, apub, apriv), 
     In(<signature>)]
   --[ Eq(verify(signature, <orand_in, opub_in, arand, apub>, opub_in), true),
       InitiatorHelloChecked(orand_in, opub_in, arand, apub),
       ResponderConnected(callID, orand_in, opub_in, arand, apub) ]->
   [ St_init(A,2, callID, orand_in, opub_in, arand, apub)]


/* Explicit equality checking */
axiom Eq_check_succeed: "All x y #i. Eq(x,y) @ i ==> x = y"
axiom Neq_check_succeed: "All x y #i. Neq(x,y) @ i ==> not (x = y)"

/* Don't be offerer and answerer for the same call. */
axiom One_role:
   " All CI OP OR AP AR  #i #j.
        InitiatorOffer(CI, OP, OR) @i & ResponderOffer(CI, AP, AR) @j 
         ==> not(OP = AP)" 

rule in_out:
[MessageOut(m)]-->[MessageIn(m)]

lemma pk_origin [reuse]:
  "All actor ltk #i. UsePK(actor, pk(ltk))@i ==> 
    Ex #j. GenLtk(actor, ltk)@j & #j < #i"

lemma one_pk [reuse]:
  " All actor actor2 ltk #i #j. GenLtk(actor,ltk) @i & GenLtk(actor2,ltk) @j
    ==> actor = actor2"  

/*lemma pk_misuse [reuse]: 
   " All actor actor2 ltk #i #j. UsePK(actor, pk(ltk)) @i & UsePK(actor2,pk(ltk)) @j
    ==> actor = actor2"*/

lemma FullCall:
   exists-trace
   " Ex CI OP AP OR AR #i #j #k #l.
        InitiatorOffer(CI, OP, OR) @ i &
	ResponderOffer(CI, AP, AR) @ j &
        InitiatorConnected(CI, OR, OP, AR, AP) @ k &
	ResponderConnected(CI, OR, OP, AR, AP)  @ l & 
        #i < #j &
        #j < #k &
        #k < #l 
   "

lemma NoUKS:
   " All CIO CIA OP AP OR AR #i #j #m #n.
        Initiated(CIO) @ #i &
        Initiated(CIA) @ #j &
        InitiatorConnected(CIO, OP, AP, OR, AR) @ #m &
        ResponderConnected(CIA, OP, AP, OR, AR) @ #n ==>
        CIO = CIA
   "
end
